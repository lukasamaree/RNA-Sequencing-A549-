loadings_diseased <- pca_diseased$rotation
# Compute the differences between loadings of each gene across the two groups
loadings_diff <- loadings_healthy - loadings_diseased
loadings_diff
# Calculate the sum of squares for each gene across the two groups
sum_of_squares <- apply(loadings_diff^2, 2, sum)
# Identify the top 10 genes with the highest differences
top_10_genes <- names(sort(sum_of_squares, decreasing = TRUE)[1:10])
# Display the names of the top 10 different genes
print(top_10_genes)
healthy_data <- gene_data[1:20, ]
diseased_data <- gene_data[21:40, ]
# Perform PCA on each group separately
pca_healthy <- prcomp(healthy_data[, -1])
pca_diseased <- prcomp(diseased_data[, -1])
# Calculate the loadings for each PCA
loadings_healthy <- pca_healthy$rotation
loadings_diseased <- pca_diseased$rotation
loadings_healthy
# Compute the differences between loadings of each gene across the two groups
loadings_diff <- loadings_healthy - loadings_diseased
loadings_diff
# Calculate the sum of squares for each gene across the two groups
sum_of_squares <- apply(loadings_diff^2, 2, sum)
# Identify the top 10 genes with the highest differences
top_10_genes <- names(sort(sum_of_squares, decreasing = TRUE)[1:10])
# Display the names of the top 10 different genes
print(top_10_genes)
healthy_data <- gene_data[1:20, ]
diseased_data <- gene_data[21:40, ]
# Perform PCA on each group separately
pca_healthy <- prcomp(healthy_data[, -1])
pca_diseased <- prcomp(diseased_data[, -1])
# Calculate the loadings for each PCA
loadings_healthy <- pca_healthy$rotation
loadings_diseased <- pca_diseased$rotation
loadings_healthy
loadings_diseased
# Compute the differences between loadings of each gene across the two groups
loadings_diff <- loadings_healthy - loadings_diseased
loadings_diff
# Calculate the sum of squares for each gene across the two groups
sum_of_squares <- apply(loadings_diff^2, 2, sum)
# Identify the top 10 genes with the highest differences
top_10_genes <- names(sort(sum_of_squares, decreasing = TRUE)[1:10])
# Display the names of the top 10 different genes
print(top_10_genes)
healthy_data <- gene_data[1:20, ]
diseased_data <- gene_data[21:40, ]
pca_healthy <- prcomp(healthy_data[, -1])
pca_diseased <- prcomp(diseased_data[, -1])
loadings_healthy <- pca_healthy$rotation
loadings_diseased <- pca_diseased$rotation
loadings_diff <- loadings_healthy - loadings_diseased
sum_of_squares <- apply(loadings_diff^2, 2, sum)
top_10_genes <- names(sort(sum_of_squares, decreasing = TRUE)[1:10])
print(top_10_genes)
setwd("/Users/lukasamare/Desktop/big_data_week_1")
# I am using hdWGCNA because it is good at visualizing single cell RNA code like Seurat. It is great at finding genes that are coexpressed towards certain biological traits. It uses heiarchial analysis to work which includes cleaning data, PCA, Clustering, making heiarchial connections, and gene identification.
#Installation CODE: it is installing packages and downloading hdWGCNA
install.packages(c("BiocManager", "WGCNA", "fdrtool", "foreach", "doParallel"))
install.packages("BiocManager")
# install additional packages:
install.packages
(c("WGCNA", "igraph", "devtools", "GeneOverlap", "ggrepel", "UCell"))
install.packages("devtools")
devtools::install_github("NightingaleHealth/ggforestplot")
#Installation CODE: it is installing packages and downloading hdWGCNA
install.packages(c("BiocManager", "WGCNA", "fdrtool", "foreach", "doParallel"))
install.packages("BiocManager")
install.packages("devtools")
# install additional packages:
install.packages(c("WGCNA", "igraph", "devtools", "GeneOverlap", "ggrepel", "UCell"))
install.packages(c("WGCNA", "igraph", "devtools", "GeneOverlap", "ggrepel", "UCell"))
install.packages("devtools")
devtools::install_github("NightingaleHealth/ggforestplot")
devtools::install_github('smorabit/hdWGCNA', ref='dev')
library(hdWGCNA)
View(Ch10Ex11)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# I am using hdWGCNA because it is good at visualizing single cell RNA code like Seurat. It is great at finding genes that are coexpressed towards certain biological traits. It uses heiarchial analysis to work which includes cleaning data, PCA, Clustering, making heiarchial connections, and gene identification.
View(Ch10Ex11)
library(Seurat)
setwd("~/Desktop/big_data_week_1/A549")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = Read10X(data.dir = ".")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
View(A549)
View(gene_data)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
View(pbmc)
A549 <- CreateSeuratObject(counts = A549.data, project = "A549n", min.cells = 3, min.features = 200)
View(A549)
View(healthy_data)
A549 <- CreateSeuratObject(counts = raw_data, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
library(Seurat)
setwd("~/Desktop/big_data_week_1/A549")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
library(Seurat)
setwd("~/Desktop/big_data_week_1/A549")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
pbmc
A549
View(nci_data)
View(nci_data)
View(nci_data)
head(colnames(A549))
head(rownames(A549))
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
library(Seurat)
setwd("~/Desktop/big_data_week_1/A549")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
A549
head(colnames(A549))
head(rownames(A549))
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
A549
head(colnames(A549))
head(rownames(A549))
head(A549@meta.data)
head(A549@meta.data)
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
A549
A549
head(A549@meta.data)
head(colnames(A549))
head(rownames(A549))
A549[["percent.mt"]] <- PercentageFeatureSet(A5549, pattern = "^MT-")
# LOAD DATA AND MAKE SEURAT OBJECT
A549 = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549, project = "A549_Lung_Carcinoma", min.cells = 3, min.features = 200)
A549
head(A549@meta.data)
head(colnames(A549))
head(rownames(A549))
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
View(pbmc)
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA")
ncol = 3,pt.size=0)
pbmc[["percent.mt"]] <- PercentageFeatureSet(A549, pattern = "^MT-")
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA")
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA")
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA") ,ncol = 3,pt.size=0)
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA", ncol = 3,pt.size=0)
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA"), ncol = 3, pt.size = 0)
Assays(A549)
A549@active.assay
A549@active.assay
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA"), ncol = 3, pt.size = 0)
View(pbmc)
View(pbmc)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(A549@meta.data)
head(colnames(A549))
head(rownames(A549))
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = "Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X("/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X("/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X("/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19/")
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
list.files
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
list.files
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
list.files
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data <- Read10X(".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
# After QC metrics you see more visible violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
setwd("~/Desktop/big_data_week_1/filtered_gene_bc_matrices/hg19")
# LOAD DATA AND MAKE SEURAT OBJECT
pbmc.data = Read10X(data.dir = ".")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data)
head(colnames(pbmc))
head(rownames(pbmc))
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3,pt.size=0)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
plot1
plot2
#REASONING BEHIND THRESHOLDS - For Feature RNA the Violin plot starts at between
# 0 and 500 and ends before 2500. We therefore with QC cut out the rest of the
# that is not relevant. Min 200 and Max is 2500. This is the same with  Mt Percent
# with RNA Count Maximum being 5. The reason for QC is to get rid of noise or irrelevent data
# QC
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# NORMALIZING DATA
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
library(Seurat)
library(magrittr)
library(dplyr)
setwd("~/Desktop/Lukas Amare/big_data_week_1/A549")
# LOAD DATA AND MAKE SEURAT OBJECT
A549.data = readRDS("raw.data.rds")
A549 <- CreateSeuratObject(counts = A549.data, project = "A549", min.cells = 3, min.features = 200)
A549
head(colnames(A549))
head(rownames(A549))
head(A549@meta.data)
#VIOLIN PLOT BEFORE
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA"), ncol = 3, pt.size = 0)
plot1 <- FeatureScatter(A549, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
#REASONING BEHIND THRESHOLDS -
#n Feature shows number of detected genes for every cell
#n Count shows nymber of unique molecular identifiers for every cell
# The reasoning behind QC thresholds in remove noise from the data set in order to have a more accurate visualization of the RNA data we are analyzing. The also increase mapping quality for UMAP.
# For our QC we set our nFeature or number of genes for each cell from 50 to 6000. We also set our nCount or molecular identifiers for each cell from 0 to 25000
# QC
A549 <- subset(A549, subset = nFeature_RNA > 50 & nFeature_RNA < 6000 & nCount_RNA < 25000 & nCount_RNA > 0)
# NORMALIZING DATA
A549 <- NormalizeData(A549, normalization.method = "LogNormalize", scale.factor = 10000)
A549 <- NormalizeData(A549)
# After QC metrics you see more visible violin plot
VlnPlot(A549, features = c("nFeature_RNA", "nCount_RNA"),
ncol = 3,pt.size=0)
A549 <- FindVariableFeatures(A549, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(A549), 10)
top10
plot1 <- VariableFeaturePlot(A549)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1
plot2
all.genes <- rownames(A549)
#SCALE DATA
A549 <- ScaleData(A549, features = all.genes)
